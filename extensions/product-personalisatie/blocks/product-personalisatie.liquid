{%- liquid
  assign gifting_products = block.settings.gifting_products
-%}

<script>
document.addEventListener('DOMContentLoaded', () => {
  const GiftingApp = (blockId, currentProduct) => {
    const mainProduct = currentProduct;
    let giftingProducts = [];
    const state = {
      isModalOpen: false,
      selectedProduct: null,
      selectedVariant: null,
      currentStep: 'product', // 'product', 'variant', 'message'
      carouselIndex: 0,
      carouselItemsPerPage: 3
    };

    const DOM = {
      container: document.getElementById(`gifting-app-container-${blockId}`),
      modalTemplate: document.getElementById('gifting-modal-template'),
      modalInstance: null,
      get modal() { return DOM.modalInstance; },
      get trigger() { return document.getElementById(`gifting-modal-trigger-checkbox-${blockId}`); },
      get productList() { return DOM.modal?.querySelector('#gifting-product-list'); },
      get variantOptions() { return DOM.modal?.querySelector('#gifting-variant-options'); },
      get addToCartButton() { return DOM.modal?.querySelector('#gifting-add-to-cart'); },
      get messageTextarea() { return DOM.modal?.querySelector('#gifting-message'); },
      get charCount() { return DOM.modal?.querySelector('#gifting-char-count'); },
      get variantSection() { return DOM.modal?.querySelector('#gifting-variant-section'); },
      get messageSection() { return DOM.modal?.querySelector('#gifting-message-section'); },
      get quantityInput() { return DOM.modal?.querySelector('#gifting-quantity'); },
      get quantityIncrease() { return DOM.modal?.querySelector('#quantity-increase'); },
      get quantityDecrease() { return DOM.modal?.querySelector('#quantity-decrease'); },
      get carouselContainer() { return DOM.modal?.querySelector('.gifting-carousel-container'); },
      get carousel() { return DOM.modal?.querySelector('.gifting-product-carousel'); },
      get carouselPrev() { return DOM.modal?.querySelector('#carousel-prev'); },
      get carouselNext() { return DOM.modal?.querySelector('#carousel-next'); },
      get carouselDots() { return DOM.modal?.querySelector('#carousel-dots'); }
    };
    
    const settings = {
      useCarousel: {{ block.settings.use_carousel | default: true }},
      productsToShow: {{ block.settings.products_to_show | default: 6 }},
      enableQuantitySelector: {{ block.settings.enable_quantity_selector | default: false }},
      maxQuantity: {{ block.settings.max_quantity | default: 99 }},
      selectProductText: '{{ block.settings.select_product_text | default: "Select product" }}',
      selectOptionText: '{{ block.settings.select_option_text | default: "Select an option" }}',
      addToCartText: '{{ block.settings.add_to_cart_text | default: "Add to cart" }}',
      soldOutText: '{{ block.settings.sold_out_text | default: "Sold out" }}'
    };

    function init() {
      if (!DOM.container || !DOM.trigger) {
        console.error('Gifting App: Essential elements not found for block ' + blockId);
        return;
      }
      setupEventListeners();
      fetchGiftingProducts();
    }

    function setupEventListeners() {
      DOM.trigger.addEventListener('change', (e) => {
        if (e.target.checked) openModal();
        else closeModal();
      });
    }

    function setupModalEventListeners() {
      if (!DOM.modal) return;
      DOM.modal.querySelector('.gifting-modal-close').addEventListener('click', () => DOM.trigger.click());
      DOM.modal.querySelector('.gifting-modal-backdrop').addEventListener('click', () => DOM.trigger.click());
      DOM.addToCartButton.addEventListener('click', addProductToCart);

      if (settings.enableQuantitySelector) {
        DOM.quantityIncrease.addEventListener('click', () => updateQuantity(1));
        DOM.quantityDecrease.addEventListener('click', () => updateQuantity(-1));
      }

      if (settings.useCarousel) {
        DOM.carouselPrev.addEventListener('click', () => moveCarousel(-1));
        DOM.carouselNext.addEventListener('click', () => moveCarousel(1));
      }
    }
    
    function moveCarousel(direction) {
      const totalPages = Math.ceil(giftingProducts.length / state.carouselItemsPerPage);
      state.carouselIndex = (state.carouselIndex + direction + totalPages) % totalPages;
      updateCarousel();
    }

    function updateCarousel() {
      const offset = -state.carouselIndex * 100;
      DOM.carousel.style.transform = `translateX(${offset}%)`;
      updateCarouselControls();
      updateCarouselDots();
    }

    function updateCarouselControls() {
      const totalPages = Math.ceil(giftingProducts.length / state.carouselItemsPerPage);
      DOM.carouselPrev.disabled = state.carouselIndex === 0;
      DOM.carouselNext.disabled = state.carouselIndex >= totalPages - 1;
    }
    
    function createCarouselDots() {
      DOM.carouselDots.innerHTML = '';
      const totalPages = Math.ceil(giftingProducts.length / state.carouselItemsPerPage);
      if (totalPages <= 1) {
        DOM.carouselDots.style.display = 'none';
      return;
    }
      DOM.carouselDots.style.display = 'flex';
      for (let i = 0; i < totalPages; i++) {
        const dot = document.createElement('button');
        dot.classList.add('gifting-carousel-dot');
        dot.dataset.index = i;
        dot.addEventListener('click', () => {
          state.carouselIndex = i;
          updateCarousel();
        });
        DOM.carouselDots.appendChild(dot);
      }
      updateCarouselDots();
    }
    
    function updateCarouselDots() {
      const dots = DOM.carouselDots.querySelectorAll('.gifting-carousel-dot');
      dots.forEach((dot, i) => {
        dot.classList.toggle('active', i === state.carouselIndex);
      });
    }

    function updateQuantity(change) {
      let currentQuantity = parseInt(DOM.quantityInput.value, 10);
      let newQuantity = currentQuantity + change;
      if (newQuantity < 1) newQuantity = 1;
      if (newQuantity > settings.maxQuantity) newQuantity = settings.maxQuantity;
      DOM.quantityInput.value = newQuantity;
    }

    async function fetchGiftingProducts() {
      let productHandles = {{ gifting_products | map: 'handle' | json }};
      if (productHandles.length === 0) return;
      
      const limitedHandles = productHandles.slice(0, settings.productsToShow);

      try {
        const productPromises = limitedHandles.map(handle =>
          fetch(`/products/${handle}.js`).then(res => res.json())
        );
        const productsData = await Promise.all(productPromises);
        giftingProducts = productsData.filter(Boolean);
        } catch (error) {
        console.error('Error fetching gifting products:', error);
      }
    }

    function renderProducts() {
      if (!DOM.productList) return;
      DOM.productList.innerHTML = '';
      const displayClass = settings.useCarousel ? 'gifting-product-carousel' : 'gifting-product-grid';
      DOM.productList.className = displayClass;
      
      giftingProducts.forEach(product => {
        const productEl = document.createElement('div');
        productEl.className = 'gifting-product-item';
        productEl.dataset.productId = product.id;
        productEl.innerHTML = `
          <img src="${product.featured_image || '{{ 'product-1' | placeholder_svg_tag }}'}" alt="${product.title}" loading="lazy">
                <h4 class="gifting-product-title">${product.title}</h4>
          <p class="gifting-product-price">${formatMoney(product.price)}</p>
          <p class="gifting-product-description">${(product.description || '').substring(0, 50)}...</p>
        `;
        productEl.addEventListener('click', () => handleProductSelect(product));
        DOM.productList.appendChild(productEl);
      });
      
      if (settings.useCarousel) {
        DOM.carouselContainer.style.display = giftingProducts.length > 0 ? 'flex' : 'none';
        DOM.carouselPrev.style.display = giftingProducts.length > state.carouselItemsPerPage ? 'flex' : 'none';
        DOM.carouselNext.style.display = giftingProducts.length > state.carouselItemsPerPage ? 'flex' : 'none';
        updateCarousel();
        createCarouselDots();
      }
    }

    function handleProductSelect(product) {
      state.selectedProduct = product;
      state.selectedVariant = null;

        document.querySelectorAll('.gifting-product-item').forEach(el => {
        el.classList.toggle('selected', el.dataset.productId == product.id);
      });

      if (product.variants.length > 1) {
            renderVariants(product.variants);
        DOM.variantSection.style.display = 'block';
        DOM.messageSection.style.display = 'none';
        state.currentStep = 'variant';
        } else {
        handleVariantSelect(product.variants[0]);
      }
      updateAddToCartButton();
    }
    
    function renderVariants(variants) {
      DOM.variantOptions.innerHTML = '';
        variants.forEach(variant => {
        const variantEl = document.createElement('div');
        variantEl.className = 'gifting-variant-option';
        variantEl.dataset.variantId = variant.id;
        variantEl.textContent = variant.title;
        variantEl.addEventListener('click', () => handleVariantSelect(variant));
        DOM.variantOptions.appendChild(variantEl);
      });
    }

    function handleVariantSelect(variant) {
      state.selectedVariant = variant;
      
      if (DOM.variantOptions) {
        document.querySelectorAll('.gifting-variant-option').forEach(el => {
          el.classList.toggle('selected', el.dataset.variantId == variant.id);
        });
      }
      
      DOM.messageSection.style.display = 'block';
      state.currentStep = 'message';
      
      setupCharacterCounter();
      updateAddToCartButton();
    }
    
    function setupCharacterCounter() {
      const maxChars = parseInt(state.selectedProduct?.metafields?.max_chars || '{{ block.settings.max_chars | default: 0 }}', 10);
      if (maxChars > 0) {
        DOM.charCount.textContent = `0/${maxChars}`;
        DOM.charCount.style.display = 'block';
        DOM.messageTextarea.maxLength = maxChars;
        DOM.messageTextarea.addEventListener('input', () => {
          const currentLength = DOM.messageTextarea.value.length;
          DOM.charCount.textContent = `${currentLength}/${maxChars}`;
          DOM.messageTextarea.classList.toggle('error', currentLength > maxChars);
        });
        } else {
        DOM.charCount.style.display = 'none';
      }
    }

    function updateAddToCartButton() {
        const button = DOM.addToCartButton;
        if (!button) return;
        const buttonText = button.querySelector('.gifting-btn-text');

        if (state.selectedVariant) {
            // **CORRECTIE HIER**
            if (state.selectedVariant.available) {
                buttonText.textContent = `${settings.addToCartText} - ${formatMoney(state.selectedVariant.price)}`;
                button.disabled = false;
        } else {
                buttonText.textContent = settings.soldOutText;
                button.disabled = true;
            }
        } else if (state.selectedProduct) {
            buttonText.textContent = settings.selectOptionText;
            button.disabled = true;
                } else {
            buttonText.textContent = settings.selectProductText;
            button.disabled = true;
        }
    }
    
    async function addProductToCart() {
      // **CORRECTIE HIER**
      if (!state.selectedVariant || !state.selectedVariant.available) {
        showToast('Dit product is momenteel niet beschikbaar.', 'error');
            return;
        }

      const button = DOM.addToCartButton;
      const buttonText = button.querySelector('.gifting-btn-text');
      const loadingSpinner = button.querySelector('.gifting-btn-loading');
      const originalButtonText = buttonText.textContent;

      button.disabled = true;
      buttonText.textContent = 'Toevoegen...';
      loadingSpinner.style.display = 'flex';
      
      const formData = {
                items: [{
          id: state.selectedVariant.id,
          quantity: settings.enableQuantitySelector ? parseInt(DOM.quantityInput.value, 10) : 1,
          properties: {
            'Gifting Product': state.selectedProduct.title,
            'Gifting Variant': state.selectedVariant.title,
            ...(DOM.messageTextarea.value && { 'Message': DOM.messageTextarea.value })
          }
        }]
      };

      try {
            const response = await fetch('/cart/add.js', {
                method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify(formData)
        });
        const data = await response.json();
            if (response.ok) {
          showToast('Product toegevoegd!', 'success');
          // Update cart icon, etc.
          document.dispatchEvent(new CustomEvent('cart:updated', { bubbles: true, detail: data }));
            } else {
          throw new Error(data.description || 'Kon product niet toevoegen.');
        }
        } catch (error) {
        showToast(error.message, 'error');
      } finally {
        button.disabled = false;
        buttonText.textContent = originalButtonText;
        loadingSpinner.style.display = 'none';
        updateAddToCartButton(); // Reset to correct state
      }
    }

    function showToast(message, type = 'success') {
      const toast = document.createElement('div');
      toast.className = `gifting-toast ${type}`;
      toast.textContent = message;
      document.body.appendChild(toast);
        setTimeout(() => {
        toast.classList.add('show');
            setTimeout(() => {
          toast.classList.remove('show');
          setTimeout(() => toast.remove(), 500);
        }, 3000);
      }, 100);
    }

    function formatMoney(priceInCents) {
      const price = (priceInCents / 100).toFixed(2);
      // This can be improved with Shopify's money formats if available
      return `€${price}`;
    }

    function openModal() {
      if (!DOM.modalInstance) {
        const modalNode = DOM.modalTemplate.firstElementChild.cloneNode(true);
        document.body.appendChild(modalNode);
        DOM.modalInstance = modalNode;
        setupModalEventListeners();
      }
      DOM.modal.style.display = 'flex';
      document.body.style.overflow = 'hidden';
      state.isModalOpen = true;
      renderProducts();
    }

    function closeModal() {
      if (!DOM.modal) return;
      DOM.modal.style.display = 'none';
      document.body.style.overflow = '';
      state.isModalOpen = false;
      resetState();
    }
    
    function resetState() {
      state.selectedProduct = null;
      state.selectedVariant = null;
      state.currentStep = 'product';
      if (DOM.variantSection) DOM.variantSection.style.display = 'none';
      if (DOM.messageSection) DOM.messageSection.style.display = 'none';
      if (DOM.messageTextarea) DOM.messageTextarea.value = '';
    }

    init();
  };

  GiftingApp('{{ block.id }}', {{ product | json }});
});
</script>

{% schema %}
{
  "name": "Product Personalisatie",
  "target": "section",
  "stylesheet": "gifting-styles.css",
  "javascript": "gifting-app.js",
  "settings": [
    {
      "type": "header",
      "content": "Algemene Instellingen"
    },
    {
      "type": "text",
      "id": "button_label",
      "label": "Knop Label",
      "default": "Voeg personalisatie toe"
    },
    {
      "type": "checkbox",
      "id": "show_icon",
      "label": "Toon icoon op knop",
      "default": true
    },
    {
      "type": "product_list",
      "id": "gifting_products",
      "label": "Selecteer personalisatie producten",
      "limit": 10
    },
    {
      "type": "range",
      "id": "products_to_show",
      "label": "Aantal producten om te tonen",
      "min": 1,
      "max": 10,
      "step": 1,
      "default": 6
    },
    {
      "type": "checkbox",
      "id": "use_carousel",
      "label": "Gebruik carrousel voor producten",
      "default": true,
      "info": "Indien uitgeschakeld, wordt een grid getoond."
    },
    {
      "type": "header",
      "content": "Modal Instellingen"
    },
    {
      "type": "text",
      "id": "modal_title",
      "label": "Modal Titel",
      "default": "Voeg een persoonlijk bericht toe"
    },
    {
      "type": "text",
      "id": "modal_subtitle",
      "label": "Modal Ondertitel",
      "default": "Maak het extra speciaal"
    },
    {
      "type": "range",
      "id": "max_chars",
      "label": "Max karakters voor bericht",
      "min": 0,
      "max": 500,
      "step": 10,
      "default": 250,
      "info": "Zet op 0 om uit te schakelen."
    },
    {
      "type": "checkbox",
      "id": "enable_quantity_selector",
      "label": "Aantal selector tonen",
      "default": false
    },
    {
      "type": "range",
      "id": "max_quantity",
      "label": "Maximale aantal",
      "min": 1,
      "max": 99,
      "step": 1,
      "default": 10,
      "info": "Alleen van toepassing als de aantal selector is ingeschakeld."
    },
    {
      "type": "header",
      "content": "Knopteksten in Modal"
    },
    {
      "type": "text",
      "id": "select_product_text",
      "label": "Tekst: Selecteer Product",
      "default": "Selecteer product"
    },
    {
      "type": "text",
      "id": "select_option_text",
      "label": "Tekst: Selecteer Optie",
      "default": "Selecteer een optie"
    },
    {
      "type": "text",
      "id": "add_to_cart_text",
      "label": "Tekst: Toevoegen",
      "default": "Voeg toe"
    },
    {
      "type": "text",
      "id": "sold_out_text",
      "label": "Tekst: Uitverkocht",
      "default": "Uitverkocht"
    },
    {
      "type": "header",
      "content": "Styling"
    },
    {
      "type": "color",
      "id": "primary_color",
      "label": "Primaire Kleur",
      "default": "#2563EB"
    },
    {
      "type": "color",
      "id": "secondary_color",
      "label": "Secundaire Kleur",
      "default": "#1D4ED8"
    },
    {
      "type": "range",
      "id": "border_radius",
      "label": "Border Radius (px)",
      "min": 0,
      "max": 30,
      "step": 1,
      "default": 12
    },
    {
      "type": "range",
      "id": "modal_width",
      "label": "Modal Width (%)",
      "min": 40,
      "max": 100,
      "step": 5,
      "default": 85
    },
    {
      "type": "range",
      "id": "modal_height",
      "label": "Modal Height (vh)",
      "min": 50,
      "max": 95,
      "step": 5,
      "default": 90
    },
    {
      "type": "range",
      "id": "product_image_height",
      "label": "Product Image Height (px)",
      "min": 80,
      "max": 200,
      "step": 10,
      "default": 120
    }
  ]
}
{% endschema %}

